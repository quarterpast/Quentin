load('function.ljs');
load('array.ljs');
load('string.ljs');
load('template.ljs');
load('number.ljs');
load('date.ljs');
JSON.load = function(a) {
	return JSON.parse(read(a));
};

var ContentError = (function init(a,b) {
	this.type = a;
	this.lost = b;
}).methods({
	toString: function() {
		return "Could not find "+this.type+" \""+this.lost+"\".";
	}
}),
PageError = function(p) {
	Object.extend(this,new ContentError('page',p.join('/')));
},
$ = {
	_: function(f) {
		return f.apply(null,arguments);
	},
	foreach: function(min, max, arr, h, lev) {
		var k, ret=<></>, it = 1;
		lev = lev || 0;
		if(typeof min === 'number') {
			if(typeof max !== 'number') {
				[lev,h,arr,max,min]=[h,arr,max,min,1];
			}
		}	else {
			[lev,h,arr,max,min]=[arr,max,min,Number.POSITIVE_INFINITY,1];
		}
		if(h.length === 1) {
			for(k in arr) {
				if(!arr.hasOwnProperty(k)) continue;
				if(it < min) {
					++it;
					continue;
				}
				if(it > max) {
					break;
				}
				ret+=h.apply(Quentin.env,[arr[k], it, lev]);
				++it;
			}
		}	else {
			for(k in arr) {
				if(!arr.hasOwnProperty(k)) continue;
				if(it < min) {
					++it;
					continue;
				}
				if(it > max) {
					break;
				}
				ret+=h.apply(Quentin.env,[k, arr[k], it, lev]);
				++it;
			}
		}
		return ret;
	},
	_if: function(cond, h, $else) {
		if (cond && cond != undefined) {
			return h.apply(Quentin.env,[cond]);
		}	else if ($else) {
			return $else.apply(Quentin.env,[cond]);
		}
		return '';
	},
	k: function(a) a
},
Quentin = {
	error: {
		page: function(d,path) <>
			<img src="images/obiwan.jpg"/>
			<h1>This is not the page you are looking for.</h1>
			Either you followed a bad link, made a typo, or I sense a great distubance in the Force. In any case, “{path.join('/')}” doesn’t exist.
		</>,
		content: function(data) <>
			<img src="images/obiwan.jpg"/>
			<h1>This is not the {data.type} you are looking for.</h1>
			Either you followed a bad link, made a typo, or I sense a great distubance in the Force. In any case, there is nothing at “{data.lost}”.
		</> 
	},
	go: function(p) {
		var args=[], r, u, o = Quentin.pages, i, a, kids = false, mine = false;
		print("Content-type: text/html\n");
		for each([i,a] in Iterator(p)) {
			if(Object.isUndefined(o[a])) {
				args = p.slice(i);
				break;
			} else {
				u = o;
				o = o[a];
			}
		}
		if(typeof o === 'function') {
			r = Quentin.template(o,args);
			kids =  i && Object.keys(u);
			mine = kids && false;
		} else if(p[0] in Quentin.pages && typeof o['index'] === 'function') {
			r = Quentin.template(o['index'],args);
			kids = Object.keys(o).length && Object.keys(o);
			mine = kids && true;
		} else if(Object.isString(o)) {
			r = Quentin.template.load(o,args);
			kids = i && Object.keys(u);
			mine = kids && false;
		} else if(p[0] in Quentin.pages && Object.isString(o['index'])) {
			r = Quentin.template.load(o.index,args);
			kids = Object.keys(o).length && Object.keys(o);
			mine = kids && true;
		} else {
			throw new PageError(p);
		}
		kids = kids || [];
		return [r, p.slice(0,p.length-args.length), kids, mine];
		
	},
	env: {
		now: function() new Date(),
		get: environment.QUERY_STRING && environment.QUERY_STRING.parseQuery(),
		post: {},//TODO: find out where/if I can get this
		path: "PATH_INFO" in environment && environment.PATH_INFO.split('/').filter($.k),
		server: environment
	},
	template: function(m,path) {
		var out = function(d) {
			try {
				return m.apply(Quentin.env,[d,path]);
			} catch(e if e instanceof ContentError) {
				var p = Quentin.template(Quentin.error.content,path);
				return p.out(e);
			} catch(e) {throw e};
		},
		p = function(d) {
			var s = out(d).toXMLString();
			print(s);
		};
		return {
			out: out,
			print: p
		};
	}	
};
Quentin.template.load = function(f,p) {
	try {
		let c = read(f),o={};
		(function() {
			eval(c);
		}).apply(o);
		return Quentin.template(o.exports,p);
	} catch(e) {
		throw e;
	}
};
Quentin.go.load = function(f,p) {
	try {
		let c = read(f),o={};
		(function() {
			eval(c);
		}).apply(o);
		Quentin.pages = o.exports;
		return Quentin.go(p);
	} catch(e if e instanceof PageError) {
		return [Quentin.template(Quentin.error.page,p),p,false,false];
	} catch(e) {
		print(e.constructor == ContentError);
		throw e;
	}
};

