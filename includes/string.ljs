load('showdown.ljs');
String.properties({
	interpret: function(value) {
		return value == null ? '' : String(value);
	}
}).methods({
	toXMLString: function() this.toString(),
	toXML: function(x) {
		x = x || 'w';
		var w = new XML('<'+x+' xml:space="preserve">'+this+'</'+x+'>');
		return w;
	},

	gsub: function(pattern, replacement) {
		function prepareReplacement(replacement) {
			if (Object.isFunction(replacement)) return replacement;
			var template = new Template(replacement);
			return function(match) { return template.evaluate(match) };
		}
		var result = '', source = this, match;
		replacement = prepareReplacement(replacement);
		if (Object.isString(pattern))
			pattern = RegExp.escape(pattern);
		if (!(pattern.length || pattern.source)) {
			replacement = replacement('');
			return replacement + source.split('').join(replacement) + replacement;
		}
		while (source.length > 0) {
			if (match = source.match(pattern)) {
				result += source.slice(0, match.index);
				result += String.interpret(replacement(match));
				source  = source.slice(match.index + match[0].length);
			} else {
				result += source, source = '';
			}
		}
		return result;
	},
	truncate: function(n,x) {
		var words = this.split(' '), t = words.slice(0,n);
		x = x || '…';
		return t.join(' ')+(words.length <= n ? '' : x.toXMLString());
	},
	times: function(l) {
		var r = '', t  = this;
		while(l-- > 0) {
			r += t;
		}
		return r;
	},
	parseQuery: function() {
		var t = this.replace(/^.*?\?/,'').split('&'), r = {};
		t.forEach(function(p) {
			var k = p.substr(0,p.indexOf('=')).replace(/\[\]$/,''),
			v = p.substr(p.indexOf('=')+1).replace(/\+/g,' ');
			if(k in r) {
				if(Object.isArray(r[k])) {
					r[k].push(v);
				} else {
					r[k] = [r[k],v];
				}
			} else {
				r[k] = v;
			}
		});
		return r;
	},
	firstCap: function() {
		return this.substr(0,1).toUpperCase()+this.substr(1);
	},
	capitalise: function() {
		return this.split(" ").invoke("firstCap").join(" ");
	},
	truncate: function(n,x) {
		var words = this.split(' '), t = words.slice(0,n);
		x = x || '…';
		return t.join(' ')+(words.length <= n ? '' : x.toXMLString());
	},
	markdown: function() {
		var s = new Showdown.converter();
		return s.makeHtml(this);
	}
});
