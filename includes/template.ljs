load('string.ljs');
var Template = (function init(template, pattern) {
	this.template = template.toString();
	this.pattern = pattern || Template.Pattern;
}).methods({
	evaluate: function(object) {
		return this.template.gsub(this.pattern, function(match) {
			if (object == null) return (match[1] + '');
			var before = match[1] || '';
			if (before == '\\') return match[2];
			var ctx = object, expr = match[3],
			pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
			match = pattern.exec(expr);
			if (match == null) return before;
			while (match != null) {
				var comp = match[1].charAt(0) == '[' ? match[2].replace(/\\\\]/g, ']') : match[1];
				ctx = ctx[comp];
				if (null == ctx || '' == match[3]) break;
				expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
				match = pattern.exec(expr);
			}
			return before + String.interpret(ctx);
		});
	}
});
String.prototype.interpolate = function(o,p) (new Template(this,p)).evaluate(o);
